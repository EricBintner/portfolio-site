
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//class set-up
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var EfxBase = Class.extend({
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//init var
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//------------------------------------------------------------------------
	//Boolean
	//------------------------------------------------------------------------
	manualStart:undefined,
	manualEnabled:undefined,
	last:undefined,
	//------------------------------------------------------------------------
	//Object
	//------------------------------------------------------------------------
	_obj:undefined,
	//------------------------------------------------------------------------
	//String
	//------------------------------------------------------------------------
	traceID:undefined,
	effectID:undefined,
	//------------------------------------------------------------------------
	//String
	//------------------------------------------------------------------------
	duration:undefined,
	delay:0,
	holdTime:undefined,
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Constructor
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	init:function() {
	},
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Methods
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	manualStart_CHK:function() {
		if (!this.manualStart) {
			this.start();
		} else {
			this.manualEnabled = true;
		}
	},
	//------------------------------------------------------------------------------------------------------------------
	manual:function() {
		if (this.manualEnabled) {
			this.start();
		} else {
			//ThrowError.go("manualEnabled is set to false", this);
		}
	},
	//------------------------------------------------------------------------------------------------------------------
	start:function() {
		Trace.output(this.traceID, "start");
	},
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Error Check
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	chk:function(unknown, func, error) {
		if (error == undefined) error = false;
		//------------------------------------------------------
		//init var
		//------------------------------------------------------
		var i;
		//------------------------------------------------------
		if (getQualifiedClassName(unknown) == "String") {
			func(unknown, error);
		}
		//------------------------------------------------------
		if (getQualifiedClassName(unknown) == "Array") {
			for(i in unknown) {
				func(i, error);
			}
		}
	},
	//------------------------------------------------------------------------------------------------------------------
	pluginCHK:function(string, error, notify) {
		if (error == undefined) error = false;
		if (notify == undefined) notify = false;
		//------------------------------------------------------
		//init var
		//------------------------------------------------------
		var bool= true;
		//------------------------------------------------------
		if (TweenEngine.plugins != null) {;
			if (TweenEngine.plugins[string] == undefined) {
				if (error) ThrowError.go(string.charAt(0).toUpperCase()+string.substring(1)+"Plugin must be activated!!!!!!!!", this);
				bool = false;
			}
		} else {
			if (error) ThrowError.go(string.charAt(0).toUpperCase()+string.substring(1)+"Plugin must be activated!!!!!!!!", this);
			bool = false;
		}
		//------------------------------------------------------
		if (notify && !bool) {
			if (this.effectID == null) string = '"'+string + '" is being utilized in one of the effects you are using but will work without it. To include plugin please activate it.';
			if (this.effectID != null) string = '"'+string + '" is being used in "'+this.effectID+'" but will work without it. To include plugin please activate it.';
			(this.traceID == null) ? this.trace(string) : Trace.output(this.traceID, string);
		}
		//------------------------------------------------------
		return bool;
	},
	//------------------------------------------------------------------------------------------------------------------
	deleteCHK:function(unknown) {
		this.chk(unknown, this.deleteProp);
	},
	//------------------------------------------------------------------------------------------------------------------
	deleteProp:function(string, error) {
		if (error == undefined) error = false;
		if (_obj != null) if (_obj[string] != undefined) delete _obj[string];
	},
	//------------------------------------------------------------------------------------------------------------------
	varCHK:function(string, error) {
		if (error == undefined) error = false;
		//------------------------------------------------------
		//init var
		//------------------------------------------------------
		var bool= true;
		//------------------------------------------------------
		if (_obj == null) {
			bool = false;
		} else {
			if (_obj[string] == undefined) bool = false;
		}
		//------------------------------------------------------
		if (!bool && error) ThrowError.go(string+" must be defined!!!!!!!!!!", this);
		//------------------------------------------------------
		return bool;
	}
});
